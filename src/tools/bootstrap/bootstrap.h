/*
 * bootstrap.h
 *
 *  Created on: Jun 22, 2017
 *      Author: yas
 */

#ifndef BOOTSTRAP_H_
#define BOOTSTRAP_H_

#include <stdio.h>
#include "../base_lib/CryptoHelper.h"
#include <string>
#include <stdlib.h>
#include <iostream>

using namespace std;
namespace license {

class Bootstrap {

public: void static write_pubkey_file(const string& public_fname, const string& pbPublicKey) {
	FILE* fp = fopen(public_fname.c_str(), "w");
	if (fp == NULL) {
		throw ios_base::failure(string("can't create :") + public_fname);
	}
	fprintf(fp, "//file generated by bootstrap.cpp, do not edit.\n\n");
	fprintf(fp, "#ifndef PUBLIC_KEY_H_\n#define PUBLIC_KEY_H_\n");
	fprintf(fp, "#define PUBLIC_KEY { \\\n");
	fprintf(fp, "%s", pbPublicKey.c_str());
	fprintf(fp, "}\n\n");
	int random = rand() % 1000;
	fprintf(fp, "#define SHARED_RANDOM %d;\n", random);
	fprintf(fp, "#endif\n");
	fclose(fp);
}

public: void static write_privkey_file(const string& private_fname, const string& privateKey) {
	FILE* fp = fopen(private_fname.c_str(), "w");
	if (fp == NULL) {
		throw ios_base::failure(string("can't create :") + private_fname);
	}
	fprintf(fp, "//file generated by bootstrap.cpp, do not edit.\n\n");
	fprintf(fp, "#ifndef PRIVATE_KEY_H_\n#define PRIVATE_KEY_H_\n");
	fprintf(fp, "#define PRIVATE_KEY { \\\n");
	fprintf(fp, "%s", privateKey.c_str());
	fprintf(fp, "}\n\n");
	fprintf(fp, "#endif\n");
	fclose(fp);
}

public: void static generatePk(string private_include, string public_include) {
	unique_ptr<CryptoHelper> cryptoHlpr = CryptoHelper::getInstance();

	try {
		cryptoHlpr->generateKeyPair();
	} catch (exception &e) {
		cerr << endl << "Error generating key pair: " << e.what() << endl
				<< "aborting" << endl;
		exit(2);
	}

	try {
		const string pubKey = cryptoHlpr->exportPublicKey();
		write_pubkey_file(public_include, pubKey);
		// Print out the public key to console as a
		// hexadecimal string.
		cout << endl << "PublicKey" << pubKey.c_str() << endl;
	} catch (exception &e) {
		cerr << endl << "Error exporting public key: " << e.what() << endl
				<< "aborting." << endl;
		exit(4);
	}

	try {
		const string privKey = cryptoHlpr->exportPrivateKey();
		write_privkey_file(private_include, privKey);
	} catch (exception &e) {
		cerr << endl << "Error exporting private key: " << e.what() << endl
				<< "aborting" << endl;
		exit(5);
	}

	return;
}
};


}


#endif /* BOOTSTRAP_H_ */
